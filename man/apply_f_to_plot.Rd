% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S04_Plotting.R
\name{apply_f_to_plot}
\alias{apply_f_to_plot}
\title{Applies a Function to Add Elements to a Plot}
\usage{
apply_f_to_plot(dtf, entries = NULL, f = NULL, ...)
}
\arguments{
\item{dtf}{A data frame with the data to plot.}

\item{entries}{List of logical vectors, each
matching in length to the number of rows in
\code{dtf}.}

\item{f}{A plotting function. If \code{NULL}
defaults to a function that draws
connected lines with points based on
the groupings defined by \code{entries}.}

\item{...}{Additional arguments to be passed
to the plotting function \code{f}.}
}
\description{
Given a data frame of values to plot,
applies a plotting function (optionally
based on a grouping factor) to add
elements to an existing plot.
}
\examples{
# Use longitudinal data set on chick weights
data( "ChickWeight" )
# Average over different chicks by
# time point and diet
dtf <- aggregate(
  ChickWeight$weight,
  list( Time = ChickWeight$Time, Diet = ChickWeight$Diet ),
  mean
)

# Specify grouping factor
diet <- list_of_matches( dtf, 1:4, 'Diet' )

# Specify aesthetics for points and lines
dtf$col.p <- assign_by_match( palettes('colorblind')[1:4], diet )
dtf$col.l <- dtf$col.p

# Create base figure
xl = c(-1, 23); yl = c(20, 300)
par(mar = c(3, 3, .5, 4 )); blank_plot(xl, yl)

# Axis lines
xl[2] <- 21; hv_line(h = yl[1], l = xl, lwd = 2)
hv_line(v = xl[1], l = yl, lwd = 2)
# Grid lines
hv_line(h = seq( 40, 280, 40), l = xl, lwd = 1, col = 'grey80' )

# Axis labels and ticks
add_axes( c( 0, 7, 14, 21 ), side = 1, line = -1 )
mtext( 'Average weight', side = 2, line = 1.5, cex = 1.2 )
add_axes( seq( 40, 280, 40 ), side = 2, line = -1 )
mtext( 'Time', side = 1, line = 1.5, cex = 1.2 )

# Legend
day_21 <- dtf$Time == 21
text( rep( 21.5, 4 ), dtf$x[day_21], 'Protein diet ' \%p\% 1:4,
      pos = 4, col = dtf$col.p[day_21], xpd = NA )

# Plot separate lines per diet
apply_f_to_plot( dtf, entries = diet, vrb = c( 'Time', 'x' ) )

# Demonstration of how to set options for default function
obs <- data.frame(
  x = c( 1:3, 1:3, 1:3 ),
  y = rep( 1:3, each = 3 ),
  group = rep( 1:3, each = 3 ),
  # Set line colors
  col.l = rep( palettes( index = 1:3 ), each = 3 ),
  # Set line widths
  lwd = rep( 1:3, each = 3 ),
  # Set line type
  lty = rep( 1:3, each = 3 ),
  # Set point type
  pch = rep( c(21,22,24), 3 ),
  # Set point color
  col.p = 'black',
  # Set background point color
  bg = 'grey',
  # Point size
  cex = rep( c( 1, 2, 3 ), 3 )
)

blank_plot( c(.5,3.5), c(.5,3.5) )
apply_f_to_plot( obs, list_of_matches( obs$group, 1:3 ) )

}
